import os
import sys
import time
import subprocess
from pathlib import Path
import gradio as gr
from pydub import AudioSegment
import numpy as np
import torch
from colorama import init, Fore, Style
from audiocraft.models import MusicGen
from TTS.api import TTS

# ==== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ====
init(autoreset=True)
os.environ["COQUI_TOS_AGREED"] = "1"

def log(msg, color=Fore.RESET, end="\n"):
    print(color + msg + Style.RESET_ALL, end=end)

log("====== –ó–ê–ü–£–°–ö Leon's Vibe Creator ======", Fore.MAGENTA)
log("–ü–∞–ø–∫–∞ –¥–ª—è –º—É–∑—ã–∫–∏: Leon_vibe", Fore.YELLOW)
log("–ü–∞–ø–∫–∞ –¥–ª—è –≥–æ–ª–æ—Å–∞: Leon_voice", Fore.YELLOW)
log("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –º–æ–¥–µ–ª–µ–π...", Fore.YELLOW)

OUTPUT_DIR = Path("Leon_vibe")
OUTPUT_DIR.mkdir(parents=True, exist_ok=True)
VOICE_DIR = Path("Leon_voice")
VOICE_DIR.mkdir(parents=True, exist_ok=True)

# ==== –ú–û–î–ï–õ–ò ====
start_time = time.time()
try:
    log("–ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å MusicGen (facebook/musicgen-small)...", Fore.YELLOW)
    musicgen = MusicGen.get_pretrained("facebook/musicgen-small")
    log("–ú–æ–¥–µ–ª—å MusicGen –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ì–æ—Ç–æ–≤–æ.", Fore.GREEN)
except Exception as e:
    log(f"–û–®–ò–ë–ö–ê MusicGen: {e}", Fore.RED)
    sys.exit(1)

try:
    log("–ó–∞–≥—Ä—É–∂–∞—é TTS XTTS v2...", Fore.YELLOW)
    tts = TTS(model_name="tts_models/multilingual/multi-dataset/xtts_v2", progress_bar=False)
    log("TTS XTTS v2 –∑–∞–≥—Ä—É–∂–µ–Ω.", Fore.GREEN)
except Exception as e:
    log(f"–û–®–ò–ë–ö–ê TTS: {e}", Fore.RED)
    sys.exit(1)

total_load = time.time() - start_time
log(f"–í—Å–µ –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞ {total_load:.1f} —Å–µ–∫. –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å!", Fore.GREEN)

# ==== –ü–û–î–î–ï–†–ñ–ö–ê (—Å—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏) ====
def create_safe_filename(name: str) -> str:
    safe = "".join(c for c in name if c.isalnum() or c in "_- ").rstrip()
    return safe or "track"

def audio_write(path: str, audio_tensor: torch.Tensor, sample_rate: int):
    audio_np = audio_tensor.cpu().numpy()
    if audio_np.ndim > 1: audio_np = audio_np[0]
    audio_int16 = (audio_np * 32767).astype(np.int16)
    AudioSegment(audio_int16.tobytes(), frame_rate=sample_rate, sample_width=2, channels=1).export(path, format="wav")

def list_audio_files():
    files = list(OUTPUT_DIR.glob("*.wav")) + list(OUTPUT_DIR.glob("*.mp3"))
    files.sort(key=os.path.getmtime, reverse=True)
    return [str(p.resolve()) for p in files]

def list_voice_files():
    files = list(VOICE_DIR.glob("*.wav"))
    return [str(f) for f in files]

def delete_file(path_str: str):
    try:
        if path_str and Path(path_str).exists():
            Path(path_str).unlink()
        updated_choices = gr.update(choices=list_audio_files())
        return updated_choices, updated_choices
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}", Fore.RED)
        return gr.update(choices=list_audio_files()), gr.update(choices=list_audio_files())

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π —Å–≤–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ ffmpeg_utils, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ:
try:
    from ffmpeg_utils import print_audio_comparison, process_existing_audio
except ImportError:
    def process_existing_audio(x, *args, **kwargs):
        return x, "ffmpeg_utils –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è"

# ==== MusicGen –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ====
def generate_music_workflow(prompt: str, duration: int, track_name: str, process_audio: bool, progress=gr.Progress(track_tqdm=True)):
    start = time.time()
    try:
        musicgen.set_generation_params(duration=int(duration))
        num_steps = 30
        for i in progress.tqdm(range(num_steps), desc="–®–∞–≥ 1/2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–∑—ã–∫–∏..."):
            time.sleep(max(0.1, duration / num_steps / 2))  # —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –±—ã–ª–∞ –∞–Ω–∏–º–∞—Ü–∏—è
        wavs = musicgen.generate([prompt])
        progress(0.9, desc="–®–∞–≥ 2/2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞...")
        safe_name = create_safe_filename(track_name)
        wav_path = OUTPUT_DIR / f"{safe_name}.wav"
        audio_write(str(wav_path), wavs[0].cpu(), musicgen.sample_rate)
        if process_audio:
            processed_path, _ = process_existing_audio(str(wav_path))
            result = processed_path or str(wav_path)
        else:
            result = str(wav_path)
        elapsed = time.time() - start
        log(f"[MusicGen] –¢—Ä–µ–∫ '{track_name}' —Å–æ–∑–¥–∞–Ω –∑–∞ {elapsed:.1f} —Å–µ–∫.", Fore.CYAN)
        return result
    except Exception as e:
        log(f"[MusicGen] –û—à–∏–±–∫–∞: {e}", Fore.RED)
        raise gr.Error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

# ==== TTS Voice Cloning (new) ====
def save_uploaded_voice(voice_file):
    if not voice_file:
        raise gr.Error("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ .wav —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏!")
    if isinstance(voice_file, tuple):  # Gradio >=4
        voice_file = voice_file[0]
    if not os.path.isfile(voice_file):
        raise gr.Error("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω.")
    fname = VOICE_DIR / Path(voice_file).name
    try:
        os.rename(voice_file, fname)
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–∞: {e}", Fore.RED)
        raise gr.Error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
    log(f"–ó–∞–≥—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –≥–æ–ª–æ—Å: {fname.name}", Fore.GREEN)
    return str(fname)

def generate_song_with_voice(lyrics, genre, duration, voice_sample_path, progress=gr.Progress(track_tqdm=True)):
    if not voice_sample_path or not os.path.isfile(voice_sample_path):
        raise gr.Error("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!")
    t0 = time.time()
    try:
        # 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–∫–∞–ª
        progress(0.05, desc="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–∫–∞–ª–∞ (TTS)...")
        vocal_path = OUTPUT_DIR / "vocal.wav"
        tts.tts_to_file(
            text=lyrics,
            speaker_wav=voice_sample_path,
            language="ru",
            file_path=str(vocal_path),
        )
        # 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º—É–∑—ã–∫—É –ø–æ–¥ –∂–∞–Ω—Ä
        progress(0.5, desc="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–∑—ã–∫–∏ (MusicGen)...")
        musicgen.set_generation_params(duration=int(duration))
        prompt = f"{genre} instrumental"
        music = musicgen.generate([prompt])
        music_path = OUTPUT_DIR / "music.wav"
        audio_np = music[0].cpu().numpy()
        if audio_np.ndim > 1: audio_np = audio_np[0]
        audio_int16 = (audio_np * 32767).astype(np.int16)
        AudioSegment(
            audio_int16.tobytes(),
            frame_rate=musicgen.sample_rate,
            sample_width=2,
            channels=1
        ).export(music_path, format="wav")
        # 3. –ú–∏–∫—à–∏—Ä—É–µ–º –≤–æ–∫–∞–ª –∏ –º–∏–Ω—É—Å
        progress(0.8, desc="–ú–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∫–∞–ª–∞ –∏ –º–∏–Ω—É—Å–∞...")
        vocal = AudioSegment.from_wav(vocal_path)
        instrumental = AudioSegment.from_wav(music_path)
        min_len = min(len(vocal), len(instrumental))
        out = instrumental[:min_len].overlay(vocal[:min_len])
        out_path = OUTPUT_DIR / "final_song.wav"
        out.export(out_path, format="wav")
        elapsed = time.time() - t0
        log(f"[TTS+MusicGen] –ü–µ—Å–Ω—è —Å –≤–∞—à–∏–º –≥–æ–ª–æ—Å–æ–º –≥–æ—Ç–æ–≤–∞ –∑–∞ {elapsed:.1f} —Å–µ–∫.", Fore.CYAN)
        return str(out_path)
    except Exception as e:
        log(f"[TTS+MusicGen] –û—à–∏–±–∫–∞: {e}", Fore.RED)
        raise gr.Error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Å–Ω–∏: {e}")

# ==== UI ====
with gr.Blocks(theme=gr.themes.Soft(primary_hue=gr.themes.colors.purple, secondary_hue=gr.themes.colors.blue)) as demo:
    gr.Markdown("# üéµ Leon's Vibe Creator (MusicGen + XTTS v2) üéµ")
    
    with gr.Tab("–°–æ–∑–¥–∞–Ω–∏–µ –∏ –£–ª—É—á—à–µ–Ω–∏–µ"):
        gr.Markdown("### –®–∞–≥ 1: –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç—Ä–µ–∫")
        with gr.Row():
            prompt_input = gr.Textbox(label="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç (–ª—É—á—à–µ –Ω–∞ –∞–Ω–≥–ª.)", lines=2, value="lofi relaxing piano")
            with gr.Column():
                track_name_input = gr.Textbox(label="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ (–∏–º—è —Ñ–∞–π–ª–∞)", value="Leon_music")
                duration_input = gr.Slider(minimum=5, maximum=60, value=20, step=1, label="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫—É–Ω–¥)")
        process_checkbox = gr.Checkbox(label="–°—Ä–∞–∑—É —É–ª—É—á—à–∏—Ç—å –∞—É–¥–∏–æ (ffmpeg)", value=True)
        generate_button = gr.Button("1. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", variant="primary")
        generated_audio_output = gr.Audio(label="–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", type="filepath")

        gr.Markdown("--- \n ### –®–∞–≥ 2: –£–ª—É—á—à–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—Ä–µ–∫")
        files_list_process = gr.Dropdown(label="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è", choices=list_audio_files(), interactive=True)
        process_button = gr.Button("2. –£–ª—É—á—à–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª")
        processed_audio_output = gr.Audio(label="–†–µ–∑—É–ª—å—Ç–∞—Ç —É–ª—É—á—à–µ–Ω–∏—è", type="filepath")
        status_text = gr.Textbox(label="–°—Ç–∞—Ç—É—Å", interactive=False)

    with gr.Tab("–§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä"):
        files_list_manage = gr.Dropdown(label="–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ", choices=list_audio_files(), interactive=True)
        with gr.Row():
            play_button = gr.Button("–ü—Ä–æ—Å–ª—É—à–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª")
            delete_button = gr.Button("–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª")
        audio_player = gr.Audio(label="–ü–ª–µ–µ—Ä", type="filepath")

    with gr.Tab("–ü–æ–π –∫–∞–∫ –õ–µ–æ–Ω! (Voice Song)"):
        gr.Markdown("## 1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à —á–∏—Å—Ç—ã–π –≥–æ–ª–æ—Å (.wav, ~10 —Å–µ–∫—É–Ω–¥, –±–µ–∑ –º—É–∑—ã–∫–∏):")
        with gr.Row():
            voice_upload = gr.Audio(label="–§–∞–π–ª –≤–∞—à–µ–≥–æ –≥–æ–ª–æ—Å–∞", type="filepath")
            upload_btn = gr.Button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –≥–æ–ª–æ—Å")
        voice_files_dropdown = gr.Dropdown(label="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", choices=list_voice_files())

        gr.Markdown("## 2. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –≤—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:")
        lyrics_input = gr.Textbox(label="–¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏")
        genre_input = gr.Dropdown(["pop", "rock", "rap", "jazz", "lofi", "electronic"], label="–ñ–∞–Ω—Ä", value="pop")
        duration_input2 = gr.Slider(minimum=10, maximum=60, value=30, step=1, label="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫)")
        generate_song_btn = gr.Button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Å–Ω—é")
        song_output = gr.Audio(label="–í–∞—à–∞ –ø–µ—Å–Ω—è", type="filepath")

        def on_upload(voice_file):
            # –ï—Å–ª–∏ –ø—É—Å—Ç–æ–π - –æ—à–∏–±–∫–∞
            if not voice_file:
                raise gr.Error("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ .wav —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏!")
            path = save_uploaded_voice(voice_file)
            return gr.update(choices=list_voice_files(), value=path)
        upload_btn.click(on_upload, inputs=voice_upload, outputs=voice_files_dropdown)
        generate_song_btn.click(
            generate_song_with_voice,
            inputs=[lyrics_input, genre_input, duration_input2, voice_files_dropdown],
            outputs=song_output,
        )

    # ==== –ö–ù–û–ü–ö–ò (—Å—Ç–∞—Ä—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å) ====
    def on_generate_and_update(prompt, duration, track_name, process_audio, progress=gr.Progress(track_tqdm=True)):
        return generate_music_workflow(prompt, duration, track_name, process_audio, progress), \
            gr.update(choices=list_audio_files()), gr.update(choices=list_audio_files())

    def on_process_and_update(filepath, progress=gr.Progress(track_tqdm=True)):
        path, status = process_existing_audio(filepath, progress)
        return path, status, gr.update(choices=list_audio_files()), gr.update(choices=list_audio_files())

    generate_button.click(
        on_generate_and_update,
        inputs=[prompt_input, duration_input, track_name_input, process_checkbox],
        outputs=[generated_audio_output, files_list_process, files_list_manage]
    )
    process_button.click(
        on_process_and_update,
        inputs=[files_list_process],
        outputs=[processed_audio_output, status_text, files_list_process, files_list_manage]
    )
    play_button.click(lambda p: p, inputs=[files_list_manage], outputs=[audio_player])
    delete_button.click(delete_file, inputs=[files_list_manage], outputs=[files_list_process, files_list_manage])

if __name__ == "__main__":
    log("===> –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≥—Ä—É–∂–µ–Ω, –º–æ–∂–Ω–æ –∑–∞—Ö–æ–¥–∏—Ç—å –ø–æ –∞–¥—Ä–µ—Å—É –Ω–∏–∂–µ", Fore.GREEN)
    demo.launch()